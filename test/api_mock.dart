import 'package:dio/dio.dart';
import 'package:mockito/mockito.dart';

// retrofitはdioを使用しているのでdioのモックを作成
// 参考)https://github.com/flutterchina/dio/issues/374
class DioAdapterMock extends Mock implements HttpClientAdapter {}

// apiのヘッダ
const dioHttpHeadersForResponseBody = {
    Headers.contentTypeHeader: [Headers.jsonContentType],
};

// apiのレスポンスを偽造
const String dummyResponsePayload = '''
[
{
"rendered_body": "\\n<h1>\\n<span id=\\"初めに\\" class=\\"fragment\\"></span><a href=\\"#%E5%88%9D%E3%82%81%E3%81%AB\\"><i class=\\"fa fa-link\\"></i></a>初めに</h1>\\n\\n<p>ほとんどのアプリがapi通信をすると思います。<br>\\nなんか楽にクライアント生成できるのないかな〜と調べていたらretrofitというライブラリを見つけました。<br>\\n今回はそれを導入してみようと思います。</p>\\n\\n<ul>\\n<li><a href=\\"https://pub.dev/packages/retrofit\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">retrofit</a></li>\\n<li><a href=\\"https://www.youtube.com/watch?v=7VYwtpaZEhg\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">retrofit導入YouTube</a></li>\\n</ul>\\n\\n<h1>\\n<span id=\\"サンプルアプリ\\" class=\\"fragment\\"></span><a href=\\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA\\"><i class=\\"fa fa-link\\"></i></a>サンプルアプリ</h1>\\n\\n<p>まずはサンプルアプリの仕様をざっくり決めます。</p>\\n\\n<ul>\\n<li>Qiitaのapiを使用して最新記事を取得する</li>\\n<li>取得した記事を一覧で表示する</li>\\n<li>記事のタイトルをタップしたら記事詳細をwebviewで開く</li>\\n</ul>\\n\\n<p>今回はこんな感じの簡単なアプリにします！</p>\\n\\n<h1>\\n<span id=\\"retforitの仕組み\\" class=\\"fragment\\"></span><a href=\\"#retforit%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\\"><i class=\\"fa fa-link\\"></i></a>retforitの仕組み</h1>\\n\\n<p>導入する前にざっくりとどういう仕組みで動くのか理解します。<br>\\n公式のReadmeやSampleを見ればなんとなくわかると思いますが、<br>\\nabstractでapiのエンドポイントを定義。<br>\\nこの定義されたファイルを元にクライアントの実体を自動生成する仕組みです。</p>\\n\\n<p>自動生成されるファイルは<code>.g.dart</code>とgがつくのが慣例のようです。<br>\\n（多分generateのgかな？）<br>\\n生成されるファイル名は<code>part</code>句で宣言します。</p>\\n\\n<h1>\\n<span id=\\"pubspecyaml\\" class=\\"fragment\\"></span><a href=\\"#pubspecyaml\\"><i class=\\"fa fa-link\\"></i></a>pubspec.yaml</h1>\\n\\n<p>お決まりのyaml定義。<br>\\n※バージョンを固定する場合はanyを書き換えてください。</p>\\n\\n<div class=\\"code-frame\\" data-lang=\\"yaml\\"><div class=\\"highlight\\"><pre><span class=\\"na\\">dependencies</span><span class=\\"pi\\">:</span>\\n  <span class=\\"na\\">http</span><span class=\\"pi\\">:</span> <span class=\\"s\\">any</span>\\n  <span class=\\"na\\">retrofit</span><span class=\\"pi\\">:</span> <span class=\\"s\\">^1.3.4</span>\\n  <span class=\\"na\\">json_annotation</span><span class=\\"pi\\">:</span> <span class=\\"s\\">^3.0.1</span>\\n\\n<span class=\\"na\\">dev_dependencies</span><span class=\\"pi\\">:</span>\\n  <span class=\\"na\\">retrofit_generator</span><span class=\\"pi\\">:</span> <span class=\\"s\\">any</span>\\n  <span class=\\"na\\">json_serializable</span><span class=\\"pi\\">:</span> <span class=\\"s\\">any</span>\\n  <span class=\\"na\\">build_runner</span><span class=\\"pi\\">:</span> <span class=\\"s\\">any</span>\\n\\n</pre></div></div>\\n\\n<h1>\\n<span id=\\"apiクライアントのabstract\\" class=\\"fragment\\"></span><a href=\\"#api%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%AEabstract\\"><i class=\\"fa fa-link\\"></i></a>apiクライアントのabstract</h1>\\n\\n<div class=\\"code-frame\\" data-lang=\\"dart\\"><div class=\\"highlight\\"><pre>\\n<span class=\\"c1\\">// qiita_client.dart</span>\\n\\n<span class=\\"kn\\">part</span> <span class=\\"s\\">'qiita_client.g.dart'</span><span class=\\"o\\">;</span>  <span class=\\"c1\\">// これが自動生成される実体のファイル名</span>\\n\\n<span class=\\"c1\\">// ここにbaseUrlを定義（引数で上書きできるようになってます）</span>\\n<span class=\\"nd\\">@RestApi</span><span class=\\"o\\">(</span><span class=\\"nl\\">baseUrl:</span> <span class=\\"s\\">\\"https://qiita.com/api\\"</span><span class=\\"o\\">)</span>  \\n<span class=\\"kd\\">abstract</span> <span class=\\"kd\\">class</span> <span class=\\"nc\\">QiitaClient</span> <span class=\\"o\\">{</span>\\n  <span class=\\"c1\\">// dioの説明は割愛しますm(_ _)m</span>\\n  <span class=\\"c1\\">// ここはまだ実体（_QiitaClient）がないのでエラーになったままです。</span>\\n  <span class=\\"c1\\">// 自動生成すると、qiita_client.g.dartの中に_QiitaClientができます</span>\\n  <span class=\\"kd\\">factory</span> <span class=\\"n\\">QiitaClient</span><span class=\\"o\\">(</span><span class=\\"n\\">Dio</span> <span class=\\"n\\">dio</span><span class=\\"o\\">,</span> <span class=\\"o\\">{</span><span class=\\"kt\\">String</span> <span class=\\"n\\">baseUrl</span><span class=\\"o\\">})</span> <span class=\\"o\\">=</span> <span class=\\"n\\">_QiitaClient</span><span class=\\"o\\">;</span> \\n\\n  <span class=\\"nd\\">@GET</span><span class=\\"o\\">(</span><span class=\\"s\\">\\"/v2/items\\"</span><span class=\\"o\\">)</span>\\n  <span class=\\"n\\">Future</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">List</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">QiitaArticle</span><span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">fetchItems</span><span class=\\"o\\">(</span>\\n      <span class=\\"nd\\">@Field</span><span class=\\"o\\">(</span><span class=\\"s\\">\\"page\\"</span><span class=\\"o\\">)</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">page</span><span class=\\"o\\">,</span>\\n      <span class=\\"nd\\">@Field</span><span class=\\"o\\">(</span><span class=\\"s\\">\\"per_page\\"</span><span class=\\"o\\">)</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">perPage</span><span class=\\"o\\">,</span>\\n      <span class=\\"nd\\">@Field</span><span class=\\"o\\">(</span><span class=\\"s\\">\\"query\\"</span><span class=\\"o\\">)</span> <span class=\\"kt\\">String</span> <span class=\\"n\\">query</span><span class=\\"o\\">);</span>\\n\\n<span class=\\"o\\">}</span>\\n</pre></div></div>\\n\\n<h1>\\n<span id=\\"リクエストレスポンスのデータクラス定義\\" class=\\"fragment\\"></span><a href=\\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9%E5%AE%9A%E7%BE%A9\\"><i class=\\"fa fa-link\\"></i></a>リクエスト・レスポンスのデータクラス定義</h1>\\n\\n<p>今回はレスポンスだけ定義します。</p>\\n\\n<div class=\\"code-frame\\" data-lang=\\"dart\\"><div class=\\"highlight\\"><pre>\\n<span class=\\"c1\\">// qiita_article.dart</span>\\n\\n<span class=\\"kn\\">part</span> <span class=\\"s\\">'qiita_article.g.dart'</span><span class=\\"o\\">;</span>\\n\\n<span class=\\"c1\\">// クラスの中に独自クラスがあって展開する場合はexplicitToJson：trueにします。</span>\\n<span class=\\"c1\\">// ここではQiitaUserという独自クラスがあるのでtrueにしてます。</span>\\n<span class=\\"nd\\">@JsonSerializable</span><span class=\\"o\\">(</span><span class=\\"nl\\">explicitToJson:</span> <span class=\\"kc\\">true</span><span class=\\"o\\">)</span> \\n<span class=\\"kd\\">class</span> <span class=\\"nc\\">QiitaArticle</span> <span class=\\"o\\">{</span>\\n  <span class=\\"c1\\">// JsonKeyでjsonの名前を定義します。同じなら省略できます。</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'rendered_body'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">renderedBody</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">body</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">bool</span> <span class=\\"n\\">coediting</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'comments_count'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">commentsCount</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'created_at'</span><span class=\\"o\\">)</span>\\n  <span class=\\"n\\">DateTime</span> <span class=\\"n\\">createdAt</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">group</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">id</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'likes_count'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">likesCount</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">bool</span> <span class=\\"n\\">private</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'reactions_count'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">reactionsCount</span><span class=\\"o\\">;</span>\\n  <span class=\\"n\\">List</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">QiitaTag</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">tags</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">title</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'updated_at'</span><span class=\\"o\\">)</span>\\n  <span class=\\"n\\">DateTime</span> <span class=\\"n\\">updatedAt</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">url</span><span class=\\"o\\">;</span>\\n  <span class=\\"n\\">QiitaUser</span> <span class=\\"n\\">user</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'page_views_count'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">pageViewsCount</span><span class=\\"o\\">;</span>\\n\\n  <span class=\\"n\\">QiitaArticle</span><span class=\\"o\\">({</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">renderedBody</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">body</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">coediting</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">commentsCount</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">createdAt</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">group</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">id</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">likesCount</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">private</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">reactionsCount</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">tags</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">title</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">updatedAt</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">url</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">user</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">pageViewsCount</span><span class=\\"o\\">,</span>\\n  <span class=\\"o\\">});</span>\\n\\n<span class=\\"o\\">}</span>\\n</pre></div></div>\\n\\n<p>自動生成を走らせる前は余計なコード（factryや定数とかゲッターとか）は書かないことをお勧めします。<br>\\n何かしらのエラーが発生するとファイルが生成されなかったです。</p>\\n\\n<h1>\\n<span id=\\"自動生成\\" class=\\"fragment\\"></span><a href=\\"#%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90\\"><i class=\\"fa fa-link\\"></i></a>自動生成</h1>\\n\\n<p>ファイルの準備が終わったらターミナルで以下コマンドを実行します。</p>\\n\\n<div class=\\"code-frame\\" data-lang=\\"terminal\\"><div class=\\"highlight\\"><pre><span class=\\"go\\">flutter pub run build_runner build\\n</span></pre></div></div>\\n\\n<p>正常に終了すると.g.dartがひょこっと出てきます。<br>\\n<a href=\\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F2650c6bb-580d-e81d-382d-ea20664635e0.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=970ef6fc9e278b244d94ead9cbd6f22c\\" target=\\"_blank\\" rel=\\"nofollow noopener\\"><img src=\\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F2650c6bb-580d-e81d-382d-ea20664635e0.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=970ef6fc9e278b244d94ead9cbd6f22c\\" alt=\\"image.png\\" data-canonical-src=\\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/325497/2650c6bb-580d-e81d-382d-ea20664635e0.png\\" srcset=\\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F2650c6bb-580d-e81d-382d-ea20664635e0.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=500f6f959d909d1f174f5cbc5ecaaec0 1x\\" loading=\\"lazy\\"></a></p>\\n\\n<h1>\\n<span id=\\"マッピング関数追加\\" class=\\"fragment\\"></span><a href=\\"#%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E9%96%A2%E6%95%B0%E8%BF%BD%E5%8A%A0\\"><i class=\\"fa fa-link\\"></i></a>マッピング関数追加</h1>\\n\\n<p>自動生成されたのでjson→クラス、factoryを追加してあげます。</p>\\n\\n<div class=\\"code-frame\\" data-lang=\\"dart\\"><div class=\\"highlight\\"><pre><span class=\\"kn\\">part</span> <span class=\\"s\\">'qiita_article.g.dart'</span><span class=\\"o\\">;</span>\\n\\n<span class=\\"nd\\">@JsonSerializable</span><span class=\\"o\\">(</span><span class=\\"nl\\">explicitToJson:</span> <span class=\\"kc\\">true</span><span class=\\"o\\">)</span>\\n<span class=\\"kd\\">class</span> <span class=\\"nc\\">QiitaArticle</span> <span class=\\"o\\">{</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'rendered_body'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">renderedBody</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">body</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">bool</span> <span class=\\"n\\">coediting</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'comments_count'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">commentsCount</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'created_at'</span><span class=\\"o\\">)</span>\\n  <span class=\\"n\\">DateTime</span> <span class=\\"n\\">createdAt</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">group</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">id</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'likes_count'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">likesCount</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">bool</span> <span class=\\"n\\">private</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'reactions_count'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">reactionsCount</span><span class=\\"o\\">;</span>\\n  <span class=\\"n\\">List</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">QiitaTag</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">tags</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">title</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'updated_at'</span><span class=\\"o\\">)</span>\\n  <span class=\\"n\\">DateTime</span> <span class=\\"n\\">updatedAt</span><span class=\\"o\\">;</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">url</span><span class=\\"o\\">;</span>\\n  <span class=\\"n\\">QiitaUser</span> <span class=\\"n\\">user</span><span class=\\"o\\">;</span>\\n  <span class=\\"nd\\">@JsonKey</span><span class=\\"o\\">(</span><span class=\\"nl\\">name:</span> <span class=\\"s\\">'page_views_count'</span><span class=\\"o\\">)</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">pageViewsCount</span><span class=\\"o\\">;</span>\\n\\n  <span class=\\"n\\">QiitaArticle</span><span class=\\"o\\">({</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">renderedBody</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">body</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">coediting</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">commentsCount</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">createdAt</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">group</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">id</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">likesCount</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">private</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">reactionsCount</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">tags</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">title</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">updatedAt</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">url</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">user</span><span class=\\"o\\">,</span>\\n    <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">pageViewsCount</span><span class=\\"o\\">,</span>\\n  <span class=\\"o\\">});</span>\\n\\n  <span class=\\"c1\\">// ↓　追記</span>\\n  <span class=\\"kd\\">factory</span> <span class=\\"n\\">QiitaArticle</span><span class=\\"o\\">.</span><span class=\\"na\\">fromJson</span><span class=\\"o\\">(</span><span class=\\"n\\">Map</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">String</span><span class=\\"o\\">,</span> <span class=\\"kd\\">dynamic</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">json</span><span class=\\"o\\">)</span> <span class=\\"o\\">=&gt;</span> <span class=\\"n\\">_QiitaArticleFromJson</span><span class=\\"o\\">(</span><span class=\\"n\\">json</span><span class=\\"o\\">);</span>\\n  <span class=\\"n\\">Map</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">String</span><span class=\\"o\\">,</span> <span class=\\"kd\\">dynamic</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">toJson</span><span class=\\"o\\">()</span> <span class=\\"o\\">=&gt;</span> <span class=\\"n\\">_QiitaArticleToJson</span><span class=\\"o\\">(</span><span class=\\"k\\">this</span><span class=\\"o\\">);</span>\\n\\n  <span class=\\"nd\\">@override</span>\\n  <span class=\\"kt\\">String</span> <span class=\\"n\\">toString</span><span class=\\"o\\">()</span> <span class=\\"o\\">=&gt;</span> <span class=\\"n\\">json</span><span class=\\"o\\">.</span><span class=\\"na\\">encode</span><span class=\\"o\\">(</span><span class=\\"n\\">toJson</span><span class=\\"o\\">());</span>\\n  <span class=\\"c1\\">// ↑　追記</span>\\n<span class=\\"o\\">}</span>\\n\\n</pre></div></div>\\n\\n<h1>\\n<span id=\\"apiクライアントを使う\\" class=\\"fragment\\"></span><a href=\\"#api%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%82%92%E4%BD%BF%E3%81%86\\"><i class=\\"fa fa-link\\"></i></a>apiクライアントを使う</h1>\\n\\n<p>できたクライアントを実際に使ってみます。<br>\\n今回はクライアントを生成するリポジトリを作って呼び出すことにします。</p>\\n\\n<p>Statusコードも欲しいのでApiResponseというクラスに変換して返却することにしました。<br>\\n（これ本来はClient側でやるべきかもしれません）</p>\\n\\n<div class=\\"code-frame\\" data-lang=\\"dart\\"><div class=\\"highlight\\"><pre><span class=\\"kd\\">class</span> <span class=\\"nc\\">QiitaRepository</span> <span class=\\"o\\">{</span>\\n\\n  <span class=\\"kd\\">final</span> <span class=\\"n\\">QiitaClient</span> <span class=\\"n\\">_client</span><span class=\\"o\\">;</span>\\n\\n  <span class=\\"n\\">QiitaRepository</span><span class=\\"o\\">([</span><span class=\\"n\\">QiitaClient</span> <span class=\\"n\\">client</span><span class=\\"o\\">]):</span>\\n        <span class=\\"c1\\">// オプショナルの第２引数でbaseUrlを変更できる</span>\\n        <span class=\\"c1\\">// QiitaClient(Dio(), \\"http://127.0.0.1:8081\\")　という感じ</span>\\n        <span class=\\"n\\">_client</span> <span class=\\"o\\">=</span> <span class=\\"n\\">client</span> <span class=\\"o\\">??</span> <span class=\\"n\\">QiitaClient</span><span class=\\"o\\">(</span><span class=\\"n\\">Dio</span><span class=\\"o\\">())</span>  \\n  <span class=\\"o\\">;</span>\\n\\n  <span class=\\"n\\">Future</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">ApiResponse</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">fetchArticle</span><span class=\\"o\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">page</span><span class=\\"o\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">perPage</span><span class=\\"o\\">,</span> <span class=\\"kt\\">String</span> <span class=\\"n\\">query</span><span class=\\"o\\">)</span> <span class=\\"n\\">async</span> <span class=\\"o\\">{</span>\\n\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">await</span> <span class=\\"n\\">_client</span><span class=\\"o\\">.</span><span class=\\"na\\">fetchItems</span><span class=\\"o\\">(</span><span class=\\"n\\">page</span><span class=\\"o\\">,</span> <span class=\\"n\\">perPage</span><span class=\\"o\\">,</span> <span class=\\"n\\">query</span><span class=\\"o\\">)</span>\\n        <span class=\\"o\\">.</span><span class=\\"na\\">then</span><span class=\\"o\\">((</span><span class=\\"n\\">value</span><span class=\\"o\\">)</span> <span class=\\"o\\">=&gt;</span>  <span class=\\"n\\">ApiResponse</span><span class=\\"o\\">(</span><span class=\\"n\\">ApiResponseType</span><span class=\\"o\\">.</span><span class=\\"na\\">OK</span><span class=\\"o\\">,</span> <span class=\\"n\\">value</span><span class=\\"o\\">))</span>\\n        <span class=\\"o\\">.</span><span class=\\"na\\">catchError</span><span class=\\"o\\">((</span><span class=\\"n\\">e</span><span class=\\"o\\">)</span> <span class=\\"o\\">{</span>\\n          <span class=\\"c1\\">// エラーハンドリングについてのretrofit公式ドキュメント</span>\\n          <span class=\\"c1\\">// https://pub.dev/documentation/retrofit/latest/</span>\\n          <span class=\\"kt\\">int</span> <span class=\\"n\\">errorCode</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"o\\">;</span>\\n          <span class=\\"kt\\">String</span> <span class=\\"n\\">errorMessage</span> <span class=\\"o\\">=</span> <span class=\\"s\\">\\"\\"</span><span class=\\"o\\">;</span>\\n          <span class=\\"k\\">switch</span> <span class=\\"o\\">(</span><span class=\\"n\\">e</span><span class=\\"o\\">.</span><span class=\\"na\\">runtimeType</span><span class=\\"o\\">)</span> <span class=\\"o\\">{</span>\\n            <span class=\\"k\\">case</span> <span class=\\"nl\\">DioError:</span>\\n              <span class=\\"c1\\">// 失敗した応答のエラーコードとメッセージを取得するサンプル</span>\\n              <span class=\\"c1\\">// ここでエラーコードのハンドリングると良さげ</span>\\n              <span class=\\"kd\\">final</span> <span class=\\"n\\">res</span> <span class=\\"o\\">=</span> <span class=\\"o\\">(</span><span class=\\"n\\">e</span> <span class=\\"k\\">as</span> <span class=\\"n\\">DioError</span><span class=\\"o\\">).</span><span class=\\"na\\">response</span><span class=\\"o\\">;</span>\\n              <span class=\\"k\\">if</span> <span class=\\"o\\">(</span><span class=\\"n\\">res</span> <span class=\\"o\\">!=</span> <span class=\\"kc\\">null</span><span class=\\"o\\">)</span> <span class=\\"o\\">{</span>\\n                <span class=\\"n\\">errorCode</span> <span class=\\"o\\">=</span> <span class=\\"n\\">res</span><span class=\\"o\\">.</span><span class=\\"na\\">statusCode</span><span class=\\"o\\">;</span>\\n                <span class=\\"n\\">errorMessage</span> <span class=\\"o\\">=</span> <span class=\\"n\\">res</span><span class=\\"o\\">.</span><span class=\\"na\\">statusMessage</span><span class=\\"o\\">;</span>\\n              <span class=\\"o\\">}</span>\\n              <span class=\\"k\\">break</span><span class=\\"o\\">;</span>\\n            <span class=\\"k\\">default</span><span class=\\"o\\">:</span>\\n          <span class=\\"o\\">}</span>\\n          <span class=\\"c1\\">// ・・・　省略　・・・</span>\\n        <span class=\\"o\\">});</span>\\n  <span class=\\"o\\">}</span>\\n\\n<span class=\\"o\\">}</span>\\n\\n<span class=\\"c1\\">// 共通のレスポンスクラスとして定義</span>\\n<span class=\\"c1\\">// resultはdynamicにしとく。（使う側でcastする）</span>\\n<span class=\\"kd\\">class</span> <span class=\\"nc\\">ApiResponse</span> <span class=\\"o\\">{</span>\\n\\n  <span class=\\"kd\\">final</span> <span class=\\"n\\">ApiResponseType</span> <span class=\\"n\\">apiStatus</span><span class=\\"o\\">;</span>\\n  <span class=\\"kd\\">final</span> <span class=\\"kd\\">dynamic</span> <span class=\\"n\\">result</span><span class=\\"o\\">;</span>\\n  <span class=\\"kd\\">final</span> <span class=\\"kt\\">String</span> <span class=\\"n\\">customMessage</span><span class=\\"o\\">;</span>\\n\\n  <span class=\\"n\\">ApiResponse</span><span class=\\"o\\">(</span><span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">apiStatus</span><span class=\\"o\\">,</span> <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">result</span><span class=\\"o\\">,</span> <span class=\\"k\\">this</span><span class=\\"o\\">.</span><span class=\\"na\\">customMessage</span><span class=\\"o\\">);</span>\\n\\n<span class=\\"o\\">}</span>\\n\\n<span class=\\"c1\\">// ここは必要に応じて定義</span>\\n<span class=\\"kt\\">enum</span> <span class=\\"n\\">ApiResponseType</span> <span class=\\"o\\">{</span>\\n  <span class=\\"n\\">OK</span><span class=\\"o\\">,</span>\\n  <span class=\\"n\\">BadRequest</span><span class=\\"o\\">,</span>\\n  <span class=\\"n\\">Forbidden</span><span class=\\"o\\">,</span>\\n  <span class=\\"n\\">NotFound</span><span class=\\"o\\">,</span>\\n  <span class=\\"n\\">MethodNotAllowed</span><span class=\\"o\\">,</span>\\n  <span class=\\"n\\">Conflict</span><span class=\\"o\\">,</span>\\n  <span class=\\"n\\">InternalServerError</span><span class=\\"o\\">,</span>\\n  <span class=\\"n\\">Other</span><span class=\\"o\\">,</span>\\n<span class=\\"o\\">}</span>\\n</pre></div></div>\\n\\n<h1>\\n<span id=\\"呼び出してみる\\" class=\\"fragment\\"></span><a href=\\"#%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\\"><i class=\\"fa fa-link\\"></i></a>呼び出してみる</h1>\\n\\n<p>今回はChangeNotifier使ってるのでViewModel側に呼び出し部分をコーディングしました。</p>\\n\\n<div class=\\"code-frame\\" data-lang=\\"dart\\"><div class=\\"highlight\\"><pre><span class=\\"kd\\">class</span> <span class=\\"nc\\">HomeScreenViewModel</span> <span class=\\"k\\">with</span> <span class=\\"n\\">ChangeNotifier</span> <span class=\\"o\\">{</span>\\n\\n  <span class=\\"n\\">QiitaRepository</span> <span class=\\"n\\">_qiitaRepository</span><span class=\\"o\\">;</span>\\n  <span class=\\"n\\">List</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">QiitaArticle</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">articles</span> <span class=\\"o\\">=</span> <span class=\\"o\\">[];</span>\\n\\n  <span class=\\"n\\">HomeScreenViewModel</span><span class=\\"o\\">([</span><span class=\\"n\\">QiitaRepository</span> <span class=\\"n\\">qiitaRepository</span><span class=\\"o\\">])</span> <span class=\\"o\\">{</span>\\n    <span class=\\"n\\">_qiitaRepository</span> <span class=\\"o\\">=</span> <span class=\\"n\\">qiitaRepository</span> <span class=\\"o\\">??</span> <span class=\\"n\\">QiitaRepository</span><span class=\\"o\\">();</span>\\n  <span class=\\"o\\">}</span>\\n\\n  <span class=\\"n\\">Future</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">bool</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">fetchArticle</span><span class=\\"o\\">()</span> <span class=\\"n\\">async</span> <span class=\\"o\\">{</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">_qiitaRepository</span><span class=\\"o\\">.</span><span class=\\"na\\">fetchArticle</span><span class=\\"o\\">(</span><span class=\\"mi\\">1</span><span class=\\"o\\">,</span> <span class=\\"mi\\">20</span><span class=\\"o\\">,</span> <span class=\\"s\\">\\"qiita user:Qiita\\"</span><span class=\\"o\\">)</span>\\n        <span class=\\"o\\">.</span><span class=\\"na\\">then</span><span class=\\"o\\">((</span><span class=\\"n\\">result</span><span class=\\"o\\">)</span> <span class=\\"o\\">{</span>\\n          <span class=\\"k\\">if</span> <span class=\\"o\\">(</span><span class=\\"n\\">result</span> <span class=\\"o\\">==</span> <span class=\\"kc\\">null</span> <span class=\\"o\\">||</span> <span class=\\"n\\">result</span><span class=\\"o\\">.</span><span class=\\"na\\">apiStatus</span><span class=\\"o\\">!=</span> <span class=\\"n\\">ApiResponseType</span><span class=\\"o\\">.</span><span class=\\"na\\">OK</span><span class=\\"o\\">)</span> <span class=\\"o\\">{</span>\\n            <span class=\\"c1\\">// TODO: 何かしらのエラー処理</span>\\n\\n            <span class=\\"c1\\">// 画面に変更通知</span>\\n            <span class=\\"n\\">notifyListeners</span><span class=\\"o\\">();</span>\\n            <span class=\\"k\\">return</span> <span class=\\"kc\\">false</span><span class=\\"o\\">;</span>\\n          <span class=\\"o\\">}</span>\\n\\n          <span class=\\"c1\\">// 結果を配列にadd</span>\\n          <span class=\\"n\\">articles</span><span class=\\"o\\">.</span><span class=\\"na\\">addAll</span><span class=\\"o\\">(</span><span class=\\"n\\">result</span><span class=\\"o\\">.</span><span class=\\"na\\">result</span><span class=\\"o\\">);</span>\\n          <span class=\\"c1\\">// 画面に変更通知</span>\\n          <span class=\\"n\\">notifyListeners</span><span class=\\"o\\">();</span>\\n          <span class=\\"k\\">return</span> <span class=\\"kc\\">true</span><span class=\\"o\\">;</span>\\n        <span class=\\"o\\">});</span>\\n  <span class=\\"o\\">}</span>\\n<span class=\\"o\\">}</span>\\n</pre></div></div>\\n\\n<p>画面側のリストはこんな感じで単純にリストに表示するようにしました。</p>\\n\\n<div class=\\"code-frame\\" data-lang=\\"dart\\"><div class=\\"highlight\\"><pre><span class=\\"c1\\">// ・・・　省略 ・・・</span>\\n<span class=\\"n\\">ListView</span><span class=\\"o\\">.</span><span class=\\"na\\">builder</span><span class=\\"o\\">(</span>\\n  <span class=\\"nl\\">key:</span> <span class=\\"n\\">Key</span><span class=\\"o\\">(</span><span class=\\"n\\">WidgetKey</span><span class=\\"o\\">.</span><span class=\\"na\\">KEY_HOME_LIST_VIEW</span><span class=\\"o\\">),</span>\\n  <span class=\\"nl\\">itemBuilder:</span> <span class=\\"o\\">(</span><span class=\\"n\\">BuildContext</span> <span class=\\"n\\">context</span><span class=\\"o\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">index</span><span class=\\"o\\">)</span> <span class=\\"o\\">{</span>\\n\\n    <span class=\\"kd\\">var</span> <span class=\\"n\\">length</span> <span class=\\"o\\">=</span> <span class=\\"n\\">context</span><span class=\\"o\\">.</span><span class=\\"na\\">read</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">HomeScreenViewModel</span><span class=\\"o\\">&gt;().</span><span class=\\"na\\">articles</span><span class=\\"o\\">.</span><span class=\\"na\\">length</span> <span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"o\\">;</span>\\n\\n    <span class=\\"c1\\">// 最終行まできたら</span>\\n    <span class=\\"k\\">if</span> <span class=\\"o\\">(</span><span class=\\"n\\">index</span> <span class=\\"o\\">==</span> <span class=\\"n\\">length</span><span class=\\"o\\">)</span> <span class=\\"o\\">{</span>\\n      <span class=\\"c1\\">// 追加読み込みの関数をcall</span>\\n      <span class=\\"n\\">context</span><span class=\\"o\\">.</span><span class=\\"na\\">read</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">HomeScreenViewModel</span><span class=\\"o\\">&gt;().</span><span class=\\"na\\">loadMore</span><span class=\\"o\\">(</span><span class=\\"n\\">context</span><span class=\\"o\\">);</span>\\n      <span class=\\"c1\\">// 画面にはローディング表示しておく</span>\\n      <span class=\\"k\\">return</span> <span class=\\"k\\">new</span> <span class=\\"n\\">Center</span><span class=\\"o\\">(</span>\\n        <span class=\\"nl\\">child:</span> <span class=\\"k\\">new</span> <span class=\\"n\\">Container</span><span class=\\"o\\">(</span>\\n          <span class=\\"nl\\">margin:</span> <span class=\\"kd\\">const</span> <span class=\\"n\\">EdgeInsets</span><span class=\\"o\\">.</span><span class=\\"na\\">only</span><span class=\\"o\\">(</span><span class=\\"nl\\">top:</span> <span class=\\"mf\\">8.0</span><span class=\\"o\\">),</span>\\n          <span class=\\"nl\\">width:</span> <span class=\\"mf\\">32.0</span><span class=\\"o\\">,</span>\\n          <span class=\\"nl\\">height:</span> <span class=\\"mf\\">32.0</span><span class=\\"o\\">,</span>\\n          <span class=\\"nl\\">child:</span> <span class=\\"kd\\">const</span> <span class=\\"n\\">CircularProgressIndicator</span><span class=\\"o\\">(),</span>\\n        <span class=\\"o\\">),</span>\\n      <span class=\\"o\\">);</span>\\n    <span class=\\"o\\">}</span> <span class=\\"k\\">else</span> <span class=\\"k\\">if</span> <span class=\\"o\\">(</span><span class=\\"n\\">index</span> <span class=\\"o\\">&gt;</span> <span class=\\"n\\">length</span><span class=\\"o\\">)</span> <span class=\\"o\\">{</span>\\n      <span class=\\"c1\\">// ローディング表示より先は無し</span>\\n      <span class=\\"k\\">return</span> <span class=\\"kc\\">null</span><span class=\\"o\\">;</span>\\n    <span class=\\"o\\">}</span>\\n\\n    <span class=\\"c1\\">// データがあるので行アイテムを作成して返却</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">Container</span><span class=\\"o\\">(</span>\\n      <span class=\\"nl\\">child:</span> <span class=\\"n\\">rowWidget</span><span class=\\"o\\">(</span><span class=\\"n\\">context</span><span class=\\"o\\">,</span> <span class=\\"n\\">index</span><span class=\\"o\\">),</span>\\n      <span class=\\"nl\\">alignment:</span> <span class=\\"n\\">Alignment</span><span class=\\"o\\">.</span><span class=\\"na\\">bottomLeft</span><span class=\\"o\\">,</span>\\n      <span class=\\"nl\\">decoration:</span> <span class=\\"n\\">BoxDecoration</span><span class=\\"o\\">(</span>\\n          <span class=\\"nl\\">border:</span> <span class=\\"n\\">Border</span><span class=\\"o\\">.</span><span class=\\"na\\">all</span><span class=\\"o\\">(</span><span class=\\"nl\\">color:</span> <span class=\\"n\\">Colors</span><span class=\\"o\\">.</span><span class=\\"na\\">grey</span><span class=\\"o\\">)</span>\\n      <span class=\\"o\\">),</span>\\n    <span class=\\"o\\">);</span>\\n  <span class=\\"o\\">},</span>\\n<span class=\\"o\\">)</span>\\n<span class=\\"c1\\">// ・・・　省略 ・・・</span>\\n</pre></div></div>\\n\\n<p>できました！<br>\\n<a href=\\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F046de84f-173b-9f0c-b58c-9670f2789e95.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cd798c724c79436281842eef767a3b06\\" target=\\"_blank\\" rel=\\"nofollow noopener\\"><img src=\\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F046de84f-173b-9f0c-b58c-9670f2789e95.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cd798c724c79436281842eef767a3b06\\" alt=\\"image.png\\" data-canonical-src=\\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/325497/046de84f-173b-9f0c-b58c-9670f2789e95.png\\" srcset=\\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F046de84f-173b-9f0c-b58c-9670f2789e95.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=58f98b0eca87947f166aa95b0195b914 1x\\" loading=\\"lazy\\"></a></p>\\n\\n<h1>\\n<span id=\\"終わりに\\" class=\\"fragment\\"></span><a href=\\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\\"><i class=\\"fa fa-link\\"></i></a>終わりに</h1>\\n\\n<p>面倒なapi通信の実体の部分を自動生成してくれるので結構楽チンでした。<br>\\nbaseUrlも差し替えられるのでモック化も問題無くできそうな気はします。（まだ試してないです）<br>\\n使っていて問題があるようでしたら追記していこうと思います。</p>\\n\\n<p>最終的なサンプルプロジェクトは<a href=\\"https://github.com/190yamayama/flutter_api_sample\\" rel=\\"nofollow noopener\\" target=\\"_blank\\">こちら</a><br>\\n※少しづつ手を加えてるのでこちらに記載したコードと違うところがあります。</p>\\n\\n<p>次は単体テスト・ウィジェットテスト・結合テストについて調べてみようと思います。</p>\\n",
"body": "# 初めに\\n\\nほとんどのアプリがapi通信をすると思います。\\nなんか楽にクライアント生成できるのないかな〜と調べていたらretrofitというライブラリを見つけました。\\n今回はそれを導入してみようと思います。\\n\\n - [retrofit](https://pub.dev/packages/retrofit)\\n - [retrofit導入YouTube](https://www.youtube.com/watch?v=7VYwtpaZEhg)\\n\\n\\n# サンプルアプリ\\n\\nまずはサンプルアプリの仕様をざっくり決めます。\\n\\n- Qiitaのapiを使用して最新記事を取得する\\n- 取得した記事を一覧で表示する\\n- 記事のタイトルをタップしたら記事詳細をwebviewで開く\\n\\n今回はこんな感じの簡単なアプリにします！\\n\\n# retforitの仕組み\\n\\n導入する前にざっくりとどういう仕組みで動くのか理解します。\\n公式のReadmeやSampleを見ればなんとなくわかると思いますが、\\nabstractでapiのエンドポイントを定義。\\nこの定義されたファイルを元にクライアントの実体を自動生成する仕組みです。\\n\\n自動生成されるファイルは`.g.dart`とgがつくのが慣例のようです。\\n（多分generateのgかな？）\\n生成されるファイル名は`part`句で宣言します。\\n\\n# pubspec.yaml\\nお決まりのyaml定義。\\n※バージョンを固定する場合はanyを書き換えてください。\\n\\n```yaml\\ndependencies:\\n  http: any\\n  retrofit: ^1.3.4\\n  json_annotation: ^3.0.1\\n\\ndev_dependencies:\\n  retrofit_generator: any\\n  json_serializable: any\\n  build_runner: any\\n\\n```\\n\\n# apiクライアントのabstract\\n\\n```dart\\n\\n// qiita_client.dart\\n\\npart 'qiita_client.g.dart';  // これが自動生成される実体のファイル名\\n\\n// ここにbaseUrlを定義（引数で上書きできるようになってます）\\n@RestApi(baseUrl: \\"https://qiita.com/api\\")  \\nabstract class QiitaClient {\\n  // dioの説明は割愛しますm(_ _)m\\n  // ここはまだ実体（_QiitaClient）がないのでエラーになったままです。\\n  // 自動生成すると、qiita_client.g.dartの中に_QiitaClientができます\\n  factory QiitaClient(Dio dio, {String baseUrl}) = _QiitaClient; \\n\\n  @GET(\\"/v2/items\\")\\n  Future<List<QiitaArticle>> fetchItems(\\n      @Field(\\"page\\") int page,\\n      @Field(\\"per_page\\") int perPage,\\n      @Field(\\"query\\") String query);\\n\\n}\\n```\\n\\n# リクエスト・レスポンスのデータクラス定義\\n\\n今回はレスポンスだけ定義します。\\n\\n```dart\\n\\n// qiita_article.dart\\n\\npart 'qiita_article.g.dart';\\n\\n// クラスの中に独自クラスがあって展開する場合はexplicitToJson：trueにします。\\n// ここではQiitaUserという独自クラスがあるのでtrueにしてます。\\n@JsonSerializable(explicitToJson: true) \\nclass QiitaArticle {\\n  // JsonKeyでjsonの名前を定義します。同じなら省略できます。\\n  @JsonKey(name: 'rendered_body')\\n  String renderedBody;\\n  String body;\\n  bool coediting;\\n  @JsonKey(name: 'comments_count')\\n  int commentsCount;\\n  @JsonKey(name: 'created_at')\\n  DateTime createdAt;\\n  String group;\\n  String id;\\n  @JsonKey(name: 'likes_count')\\n  int likesCount;\\n  bool private;\\n  @JsonKey(name: 'reactions_count')\\n  int reactionsCount;\\n  List<QiitaTag> tags;\\n  String title;\\n  @JsonKey(name: 'updated_at')\\n  DateTime updatedAt;\\n  String url;\\n  QiitaUser user;\\n  @JsonKey(name: 'page_views_count')\\n  int pageViewsCount;\\n\\n  QiitaArticle({\\n    this.renderedBody,\\n    this.body,\\n    this.coediting,\\n    this.commentsCount,\\n    this.createdAt,\\n    this.group,\\n    this.id,\\n    this.likesCount,\\n    this.private,\\n    this.reactionsCount,\\n    this.tags,\\n    this.title,\\n    this.updatedAt,\\n    this.url,\\n    this.user,\\n    this.pageViewsCount,\\n  });\\n\\n}\\n```\\n\\n自動生成を走らせる前は余計なコード（factryや定数とかゲッターとか）は書かないことをお勧めします。\\n何かしらのエラーが発生するとファイルが生成されなかったです。\\n\\n# 自動生成\\n\\nファイルの準備が終わったらターミナルで以下コマンドを実行します。\\n\\n```terminal\\nflutter pub run build_runner build\\n```\\n正常に終了すると.g.dartがひょこっと出てきます。\\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/325497/2650c6bb-580d-e81d-382d-ea20664635e0.png)\\n\\n# マッピング関数追加\\n\\n自動生成されたのでjson→クラス、factoryを追加してあげます。\\n\\n```dart\\npart 'qiita_article.g.dart';\\n\\n@JsonSerializable(explicitToJson: true)\\nclass QiitaArticle {\\n  @JsonKey(name: 'rendered_body')\\n  String renderedBody;\\n  String body;\\n  bool coediting;\\n  @JsonKey(name: 'comments_count')\\n  int commentsCount;\\n  @JsonKey(name: 'created_at')\\n  DateTime createdAt;\\n  String group;\\n  String id;\\n  @JsonKey(name: 'likes_count')\\n  int likesCount;\\n  bool private;\\n  @JsonKey(name: 'reactions_count')\\n  int reactionsCount;\\n  List<QiitaTag> tags;\\n  String title;\\n  @JsonKey(name: 'updated_at')\\n  DateTime updatedAt;\\n  String url;\\n  QiitaUser user;\\n  @JsonKey(name: 'page_views_count')\\n  int pageViewsCount;\\n\\n  QiitaArticle({\\n    this.renderedBody,\\n    this.body,\\n    this.coediting,\\n    this.commentsCount,\\n    this.createdAt,\\n    this.group,\\n    this.id,\\n    this.likesCount,\\n    this.private,\\n    this.reactionsCount,\\n    this.tags,\\n    this.title,\\n    this.updatedAt,\\n    this.url,\\n    this.user,\\n    this.pageViewsCount,\\n  });\\n\\n  // ↓　追記\\n  factory QiitaArticle.fromJson(Map<String, dynamic> json) => _QiitaArticleFromJson(json);\\n  Map<String, dynamic> toJson() => _QiitaArticleToJson(this);\\n\\n  @override\\n  String toString() => json.encode(toJson());\\n  // ↑　追記\\n}\\n\\n```\\n\\n# apiクライアントを使う\\n\\nできたクライアントを実際に使ってみます。\\n今回はクライアントを生成するリポジトリを作って呼び出すことにします。\\n\\nStatusコードも欲しいのでApiResponseというクラスに変換して返却することにしました。\\n（これ本来はClient側でやるべきかもしれません）\\n\\n```dart\\nclass QiitaRepository {\\n\\n  final QiitaClient _client;\\n\\n  QiitaRepository([QiitaClient client]):\\n        // オプショナルの第２引数でbaseUrlを変更できる\\n        // QiitaClient(Dio(), \\"http://127.0.0.1:8081\\")　という感じ\\n        _client = client ?? QiitaClient(Dio())  \\n  ;\\n\\n  Future<ApiResponse> fetchArticle(int page, int perPage, String query) async {\\n\\n    return await _client.fetchItems(page, perPage, query)\\n        .then((value) =>  ApiResponse(ApiResponseType.OK, value))\\n        .catchError((e) {\\n          // エラーハンドリングについてのretrofit公式ドキュメント\\n          // https://pub.dev/documentation/retrofit/latest/\\n          int errorCode = 0;\\n          String errorMessage = \\"\\";\\n          switch (e.runtimeType) {\\n            case DioError:\\n              // 失敗した応答のエラーコードとメッセージを取得するサンプル\\n              // ここでエラーコードのハンドリングると良さげ\\n              final res = (e as DioError).response;\\n              if (res != null) {\\n                errorCode = res.statusCode;\\n                errorMessage = res.statusMessage;\\n              }\\n              break;\\n            default:\\n          }\\n          // ・・・　省略　・・・\\n        });\\n  }\\n\\n}\\n\\n// 共通のレスポンスクラスとして定義\\n// resultはdynamicにしとく。（使う側でcastする）\\nclass ApiResponse {\\n\\n  final ApiResponseType apiStatus;\\n  final dynamic result;\\n  final String customMessage;\\n\\n  ApiResponse(this.apiStatus, this.result, this.customMessage);\\n\\n}\\n\\n// ここは必要に応じて定義\\nenum ApiResponseType {\\n  OK,\\n  BadRequest,\\n  Forbidden,\\n  NotFound,\\n  MethodNotAllowed,\\n  Conflict,\\n  InternalServerError,\\n  Other,\\n}\\n```\\n\\n# 呼び出してみる\\n\\n今回はChangeNotifier使ってるのでViewModel側に呼び出し部分をコーディングしました。\\n\\n```dart\\nclass HomeScreenViewModel with ChangeNotifier {\\n\\n  QiitaRepository _qiitaRepository;\\n  List<QiitaArticle> articles = [];\\n\\n  HomeScreenViewModel([QiitaRepository qiitaRepository]) {\\n    _qiitaRepository = qiitaRepository ?? QiitaRepository();\\n  }\\n\\n  Future<bool> fetchArticle() async {\\n    return _qiitaRepository.fetchArticle(1, 20, \\"qiita user:Qiita\\")\\n        .then((result) {\\n          if (result == null || result.apiStatus!= ApiResponseType.OK) {\\n            // TODO: 何かしらのエラー処理\\n\\n            // 画面に変更通知\\n            notifyListeners();\\n            return false;\\n          }\\n\\n          // 結果を配列にadd\\n          articles.addAll(result.result);\\n          // 画面に変更通知\\n          notifyListeners();\\n          return true;\\n        });\\n  }\\n}\\n```\\n\\n画面側のリストはこんな感じで単純にリストに表示するようにしました。\\n\\n```dart\\n// ・・・　省略 ・・・\\nListView.builder(\\n  key: Key(WidgetKey.KEY_HOME_LIST_VIEW),\\n  itemBuilder: (BuildContext context, int index) {\\n\\n    var length = context.read<HomeScreenViewModel>().articles.length -1;\\n\\n    // 最終行まできたら\\n    if (index == length) {\\n      // 追加読み込みの関数をcall\\n      context.read<HomeScreenViewModel>().loadMore(context);\\n      // 画面にはローディング表示しておく\\n      return new Center(\\n        child: new Container(\\n          margin: const EdgeInsets.only(top: 8.0),\\n          width: 32.0,\\n          height: 32.0,\\n          child: const CircularProgressIndicator(),\\n        ),\\n      );\\n    } else if (index > length) {\\n      // ローディング表示より先は無し\\n      return null;\\n    }\\n\\n    // データがあるので行アイテムを作成して返却\\n    return Container(\\n      child: rowWidget(context, index),\\n      alignment: Alignment.bottomLeft,\\n      decoration: BoxDecoration(\\n          border: Border.all(color: Colors.grey)\\n      ),\\n    );\\n  },\\n)\\n// ・・・　省略 ・・・\\n```\\n\\n\\nできました！\\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/325497/046de84f-173b-9f0c-b58c-9670f2789e95.png)\\n\\n\\n# 終わりに\\n面倒なapi通信の実体の部分を自動生成してくれるので結構楽チンでした。\\nbaseUrlも差し替えられるのでモック化も問題無くできそうな気はします。（まだ試してないです）\\n使っていて問題があるようでしたら追記していこうと思います。\\n\\n最終的なサンプルプロジェクトは[こちら](https://github.com/190yamayama/flutter_api_sample)\\n※少しづつ手を加えてるのでこちらに記載したコードと違うところがあります。\\n\\n次は単体テスト・ウィジェットテスト・結合テストについて調べてみようと思います。\\n",
"coediting": false,
"comments_count": 0,
"created_at": "2020-09-29T18:36:16+09:00",
"group": null,
"id": "fc570a117ed2a5c713b3",
"likes_count": 1,
"private": false,
"reactions_count": 0,
"tags": [
{
"name": "Android",
"versions": []
},
{
"name": "iOS",
"versions": []
},
{
"name": "api",
"versions": []
},
{
"name": "Retrofit",
"versions": []
},
{
"name": "Flutter",
"versions": []
}
],
"title": "FlutterやってみたよPart7（retrofit導入）",
"updated_at": "2020-09-29T18:36:16+09:00",
"url": "https://qiita.com/190yamashita/items/fc570a117ed2a5c713b3",
"user": {
"description": "今はswiftメイン（たまにjava/kotlin）でアプリ開発してます。\\r\\nkotlin/Flutterについては勉強中です。",
"facebook_id": "",
"followees_count": 0,
"followers_count": 3,
"github_login_name": "ikuo-yamashita",
"id": "190yamashita",
"items_count": 17,
"linkedin_id": "",
"location": "",
"name": "iyama",
"organization": "株式会社i-enter",
"permanent_id": 325497,
"profile_image_url": "https://avatars3.githubusercontent.com/u/38274647?v=4",
"team_only": false,
"twitter_screen_name": null,
"website_url": ""
},
"page_views_count": null
}
]
    ''';

// ダミーレスポンス（正常終了）
final okHttpResponse = ResponseBody.fromString(
    dummyResponsePayload, 200, headers: dioHttpHeadersForResponseBody,);